const path = require("path");
const tester = require("circom_tester").wasm;
const chai = require("chai");
const assert = chai.assert;

export {};

const inputs1JSON = `
{
  "claim": [
    "5229058725978483884509395681280",
    "289859737856552242459908064039047479872297983795219456858471895981296582656",
    "0",
    "0",
    "287762808833",
    "0",
    "0",
    "0"
  ],
  "hoClaimKOpClaimsTreeRoot": "7946780746749119737347824328380716888185847167350706156852781411110671384281",
  "hoClaimKOpMtp": [
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "hoKOpSk": "4311558182412267067793656453445268895647366823536826824741896295264034954945",
  "isIdenState": "10057995389383596935758563115193565434731801882563552942619957272940535425051",
  "isProofExistClaimsTreeRoot": "2098429289195041877503796573672809381611283942089313719658676448183592072210",
  "isProofExistMtp": [
    "1057889796422815837190757694830636547632657717350193461241702298517508497145",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "isProofRootMtp": [
    "17808600532503449533631993614276023258818174848078940374531685668578047172141",
    "0",
    "4384706921277752443651310638204899155127465281135248749515595423118486077645",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "isProofValidClaimsTreeRoot": "13565340421349544257305398433609531500708391603118390376670593177205469141435",
  "isProofValidNotRevMtp": [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "isProofValidNotRevMtpAuxHi": "0",
  "isProofValidNotRevMtpAuxHv": "0",
  "isProofValidNotRevMtpNoAux": "1",
  "isProofValidRevTreeRoot": "0",
  "isProofValidRootsTreeRoot": "17188596390270522907483680627414241804681789552543934045200460119611154301405"
}
`;

const inputs2JSON = `
{
  "claim": [
    "6496709326206713286006098886656",
    "289859737856552242459908064039047479872297983795219456858471895981296582656",
    "0",
    "0",
    "356482285576",
    "0",
    "0",
    "0"
  ],
  "hoClaimKOpClaimsTreeRoot": "7946780746749119737347824328380716888185847167350706156852781411110671384281",
  "hoClaimKOpMtp": [
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "hoKOpSk": "4311558182412267067793656453445268895647366823536826824741896295264034954945",
  "isIdenState": "155707193022447986584728717210325957657794447219727787951145745723831169770",
  "isProofExistClaimsTreeRoot": "17665117150036429725233582371439065135093098130527802028343707261927599056119",
  "isProofExistMtp": [
    "20790601838801719006025771195043180984843757512417238895647308319412821724545",
    "19378624249345576843856253015686435881146139440990979618664810829337721815386",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "isProofRootMtp": [
    "17808600532503449533631993614276023258818174848078940374531685668578047172141",
    "0",
    "4384706921277752443651310638204899155127465281135248749515595423118486077645",
    "0",
    "0",
    "5763858004336254022097537279835991236534958919079361439770180976911401951748",
    "0",
    "0",
    "0"
  ],
  "isProofValidClaimsTreeRoot": "17665117150036429725233582371439065135093098130527802028343707261927599056119",
  "isProofValidNotRevMtp": [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "isProofValidNotRevMtpAuxHi": "2279272124503809695177170942549831206840003426178943720957919922723804431629",
  "isProofValidNotRevMtpAuxHv": "17142353815121200339963760108352696118925531835836661574604762966243856573359",
  "isProofValidNotRevMtpNoAux": "0",
  "isProofValidRevTreeRoot": "4454658387766047782454182155475896417150299786255944499255969748476496678707",
  "isProofValidRootsTreeRoot": "4841043515306036220150012978888021939114827061162154552792352686672729465626"
}
`;

// describe("credential test (old)", function () {
//     this.timeout(200000);
//
//     it("Test Credential", async () => {
//         const circuit = await tester(
//             path.join(__dirname, "circuits", "credential.circom"),
//             {reduceConstraints: false}
//         );
//
//         // input data generated with
//         // circuits/test/testvectorsgen/credential_test.go, which uses
//         // go-iden3-core
//
//         const witness1 = await circuit.calculateWitness(JSON.parse(inputs1JSON));
//         await circuit.checkConstraints(witness1);
//
//         const witness2 = await circuit.calculateWitness(JSON.parse(inputs2JSON));
//         await circuit.checkConstraints(witness2);
//     });
// });
