import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;
const chai = require("chai");
const assert = chai.assert;

export {};

const NOOP = "0"; // = - no operation, skip query verification if set
const EQUALS  = "1"; // = - equals sign
const LESS    = "2"; // = - less-than sign
const GREATER    = "3"; // = - greter-than sign
const IN = "4"; // = - in
const NOTIN = "5"; // = - notin

describe("Test query",  function() {
    let circuit;

    this.timeout(600000);

    before(async function() {
        circuit = await wasm_tester(path.join(__dirname, "../circuits/query/", "jsonldQueryTest.circom"));
    });

    describe("#Noop", function() {
        it("#Noop - path does not exists in claim tree", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "1",
                mtp: [
                    "5559250731000753554753485016695600829384855452867544273344893815961938985436",
                    "20222899544143787877985297439625828822272100269106711904511119118819809140477",
                    "14730426618666280941604039095550905490156541514901979358549599762282042588641",
                    "20654267938816600839519175295982211976220677218619388526553622238429183925472",
                    "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "21736915164223642590619077617436600487181319298658287785421854227442556379480",
                auxNodeValue: "1873436621564613819007258973366071456804316124771343960217044804490130665026",
                auxNodeEmpty: "0",
                path: "11233225666472808563596949784224297680836098100527786420590398368053585890520",
                in: "10",
                operator:  NOOP,
                value: ["11", "0", "0"],
            }

            const expOut = {out: 1, value: ["11", "0", "0"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });
    });

    describe("#IsEqual", function() {
        it("#IsEqual (true)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                operator:  EQUALS,
                in: "83627465",
                value: ["83627465", "0", "0"],
            }

            const expOut = {out: 1, value: ["83627465", "0", "0"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });

        it("#IsEqual (false)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  EQUALS,
                value: ["11", "0", "0"],
            }

            const expOut = {out: 0, value: ["11", "0", "0"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });
    });

    describe("#LessThan", function() {
        it("#LessThan - 83627465 < 83627466 (true)", async () => {
            const w = await circuit.calculateWitness({
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator: LESS,
                value: ["83627466", "0", "0"],
            }, true);

            const expOut = {out: 1, value: ["83627466", "0", "0"]}

            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });

        it("#LessThan - 83627465 = 83627465 (false)", async () => {

            const w1 = await circuit.calculateWitness({
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator: LESS,
                value: ["83627465", "0", "0"],
            }, true);

            const expOut = {out: 0, value: ["83627465", "0", "0"]}

            await circuit.assertOut(w1, expOut);
            await circuit.checkConstraints(w1);
        });

        it("#LessThan - 83627465 < 9 (false)", async () => {
            const w2 = await circuit.calculateWitness({
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  LESS,
                value: ["9", "0", "0"],
            }, true);

            const expOut = {out: 0, value: ["9", "0", "0"]}

            await circuit.assertOut(w2, expOut);
            await circuit.checkConstraints(w2);
        });

    });

    describe("#GreterThan", function() {
        it("#GreterThan - 83627465 > 10 (true)", async () => {
            const w = await circuit.calculateWitness({
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator: GREATER,
                value: ["10", "0", "0"],
            }, true);

            const expOut = {out: 1, value: ["10", "0", "0"]}

            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });

        it("#GreterThan - 83627465 > 83627465 (false)", async () => {

            const w1 = await circuit.calculateWitness({
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator: GREATER,
                value: ["83627465", "0", "0"],
            }, true);

            const expOut = {out: 0, value: ["83627465", "0", "0"]}

            await circuit.assertOut(w1, expOut);
            await circuit.checkConstraints(w1);
        });

        it("#GreterThan - 83627465 > 83627466 (false) ", async () => {
            const w2 = await circuit.calculateWitness({
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  GREATER,
                value: ["83627466", "0", "0"],
            }, true);

            const expOut = {out: 0, value: ["83627466", "0", "0"]}

            await circuit.assertOut(w2, expOut);
            await circuit.checkConstraints(w2);
        });
    });

    describe("#IN", function() {
        it("#IN 83627465 in ['12', '83627465', '10'] (true)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  IN,
                value: ["12", "83627465", "10"],
            }

            const expOut = {out: 1, value: ["12", "83627465", "10"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });

        it("#IN 83627465 in [`10`, `10`, `0`] (false)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  IN,
                value: ["10", "10", "0"],
            }

            const expOut = {out: 0, value: ["10", "10", "0"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });
    });

    describe("#NOTIN", function() {
        it("#NOTIN 83627465 NOT in ['12', '11', '11'] (true)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  NOTIN,
                value: ["12", "11", "13"],
            }

            const expOut = {out: 1, value: ["12", "11", "13"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });

        it("#NOTIN 83627465 NOT in [`83627465`, `83627465`, `0`] (false)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  NOTIN,
                value: ["83627465", "83627465", "0"],
            }

            const expOut = {out: 0, value: ["83627465", "83627465", "0"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });

        it("#NOTIN 10 NOT in [`0`, `0`, `0`] (true)", async () => {
            const inputs = {
                jsonldRoot: "17568057213828477233507447080689055308823020388972334380526849356111335110900",
                notExists: "0",
                mtp: [
                    "11910293038428617741524804146372123460316909087472110224310684293437832969164",
                    "16177004431687368818113912782442107150203001063591538107922536599846633952045",
                    "2273332527522244458085120870407367354166812099476912338970230154990132783303",
                    "13192918401641087849642106777397606986912934444326373440658673644787217670633",
                    "7168654565749461589078377009464061974077279404969163913984304601783416740392",
                    "14271173073428930573422493938722323454218890711784989528150404024814136007165",
                    "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
                ],
                auxNodeKey: "0",
                auxNodeValue: "0",
                auxNodeEmpty: "0",
                path: "14893038329526541210094612673793094547542854832994245253710267888299004292355",
                in: "83627465",
                operator:  NOTIN,
                value: ["0", "0", "0"],
            }

            const expOut = {out: 1, value: ["0", "0", "0"]}

            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });
    });
});
