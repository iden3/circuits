import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;
const chai = require("chai");
const assert = chai.assert;

export {};

describe("Test CredentialAtomicQuerySig.circom", function () {

    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits/query", "credentialAtomicQuerySigTest.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );

    });

    after(async () => {
        circuit.release()
    })

    it("claims slot[3] = `10`, value eq the firs element 10 = 10 : [10, 0, 0, 0]", async () => {
        const inputs = {
            authClaim: ["164867201768971999401702181843803888060", "0", "17640206035128972995519606214765283372613874593503528180869261482403155458945", "20634138280259599560273310290025659992320584624461316485434108770067472477956", "15930428023331155902", "0", "0", "0"],
            authClaimMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            authClaimNonRevMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            authClaimNonRevMtpAuxHi: "0",
            authClaimNonRevMtpAuxHv: "0",
            authClaimNonRevMtpNoAux: "1",
            challenge: "1",
            challengeSignatureR8x: "8553678144208642175027223770335048072652078621216414881653012537434846327449",
            challengeSignatureR8y: "5507837342589329113352496188906367161790372084365285966741761856353367255709",
            challengeSignatureS: "2093461910575977345603199789919760192811763972089699387324401771367839603655",
            claim: ["3677203805624134172815825715044445108615", "293373448908678327289599234275657468666604586273320428510206058753616052224", "10", "0", "30803922965249841627828060161", "0", "0", "0"],
            claimNonRevIssuerClaimsTreeRoot: "7246896034587217404391735131819928831029447598354448731452631177424919458245",
            claimNonRevIssuerRevTreeRoot: "0",
            claimNonRevIssuerRootsTreeRoot: "0",
            claimNonRevIssuerState: "3465800424177143196107127845857728750770736366457056414231195686681735039800",
            claimNonRevMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            claimNonRevMtpAuxHi: "0",
            claimNonRevMtpAuxHv: "0",
            claimNonRevMtpNoAux: "1",
            claimSchema: "274380136414749538182079640726762994055",
            claimSignatureR8x: "8779067656114332903020242684851796032119126488921531110623791705803984262991",
            claimSignatureR8y: "13306405016493478690398166140970656888951448066944189698852158290912042403775",
            claimSignatureS: "197673914787251896426501440340741060862049817709689386266011731144781008463",
            hoClaimsTreeRoot: "209113798174833776229979813091844404331713644587766182643501254985715193770",
            hoIdenState: "15383795261052586569047113011994713909892315748410703061728793744343300034754",
            hoRevTreeRoot: "0",
            hoRootsTreeRoot: "0",
            id: "293373448908678327289599234275657468666604586273320428510206058753616052224",
            issuerAuthClaimMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            issuerAuthHi: "7525660401973051542017027326347608664958645019649155249872141692089998559314",
            issuerAuthHv: "14324808554535590121751093260129075040263902072955826744017618397253462388668",
            issuerClaimsTreeRoot: "417537058197893761686953664555712220182002293231272771939654136223079364880",
            issuerID: "238622032992029818959027522035982899478798944063520057730894779896578244608",
            issuerIdenState: "17696575440410541956651452069150743140855295736867783485086107762348968115816",
            issuerPubKeyX: "9582165609074695838007712438814613121302719752874385708394134542816240804696",
            issuerPubKeyY: "18271435592817415588213874506882839610978320325722319742324814767882756910515",
            issuerRevTreeRoot: "0",
            issuerRootsTreeRoot: "0",
            operator: 0,
            slotIndex: 2,
            timestamp: "1642074362",
            value: ["10", "0", "0", "0"],
        }

        const expOut = {
            challenge: "1",
            id: "293373448908678327289599234275657468666604586273320428510206058753616052224",
            claimSchema: "274380136414749538182079640726762994055",
            slotIndex: "2",
            operator: "0",
            timestamp: "1642074362",
        }
        const w = await circuit.calculateWitness(inputs, true);

        await circuit.assertOut(w, expOut);
    });
})
;
