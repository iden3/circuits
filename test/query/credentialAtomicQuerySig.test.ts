import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;
const chai = require("chai");
const assert = chai.assert;

export {};

describe("Test CredentialAtomicQuerySig.circom", function() {

    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits/query", "credentialAtomicQuerySigTest.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );

    });

    after(async () => {
        circuit.release()
    })

    it("credentialAtomicQuerySigTest", async () => {
        // inputs MUST be generated by GO-CIRCUITS library https://github.com/iden3/go-circuits (using corresponding test)
        const inputs = {
            challenge: "84239",
            challengeSignatureR8x: "17256470807959844760813672102077518901604821833747252740769213992056081961938",
            challengeSignatureR8y: "9435460840497702140054406464388155007968200518166048603069118423922327842531",
            challengeSignatureS: "1317156592513782660513773863921528408208779167049302089878532261436253554252",
            claimSchema: "210459579859058135404770043788028292398",
            issuerAuthClaim: ["304427537360709784173770334266246861770", "0", "419741464243921980904176857352998843399517335463396494343002332820489651931", "1750672026437926689957684608550347198726697676389988438088583513415832431336", "0", "0", "0", "0"],
            issuerAuthClaimMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            issuerClaim: ["3613283249068442770038516118105710406958", "272178445629038039669984628340067725016241140388910099373156104396895485952", "19960424", "1", "227737578863135127233568287215", "0", "0", "0"],
            issuerClaimNonRevClaimsTreeRoot: "4018207320766916077867903210445137918159289813146486428882048895278157186323",
            issuerClaimNonRevMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            issuerClaimNonRevMtpAuxHi: "0",
            issuerClaimNonRevMtpAuxHv: "0",
            issuerClaimNonRevMtpNoAux: "1",
            issuerClaimNonRevRevTreeRoot: "0",
            issuerClaimNonRevRootsTreeRoot: "0",
            issuerClaimNonRevState: "17434867879815647641273356157672722571161873439019346095456851910362017602140",
            issuerClaimSignatureR8x: "11911848016454697641075699822101844016412294961668932295570379245026151791028",
            issuerClaimSignatureR8y: "21552290909221283912672571313372530291248098028536032798186096973859687859520",
            issuerClaimSignatureS: "1775034101019145451318296471093055441565837451110891771694103727044412783984",
            issuerClaimsTreeRoot: "4018207320766916077867903210445137918159289813146486428882048895278157186323",
            issuerID: "196217687838362410756335519382545643627109338397836700379125748288445480960",
            issuerRevTreeRoot: "0",
            issuerRootsTreeRoot: "0",
            issuerState: "17434867879815647641273356157672722571161873439019346095456851910362017602140",
            operator: 1,
            slotIndex: 2,
            timestamp: "1651345373",
            userAuthClaim: ["304427537360709784173770334266246861770", "0", "11018670139668539148648471076840439750998073623108932085495698041412409494696", "9581723621064378369149603135841835967712470590044764012481747126299227766550", "0", "0", "0", "0"],
            userAuthClaimMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            userAuthClaimNonRevMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            userAuthClaimNonRevMtpAuxHi: "0",
            userAuthClaimNonRevMtpAuxHv: "0",
            userAuthClaimNonRevMtpNoAux: "1",
            userClaimsTreeRoot: "4136941540523566163310406609372477845894852271709030416629996567249643320858",
            userID: "272178445629038039669984628340067725016241140388910099373156104396895485952",
            userRevTreeRoot: "0",
            userRootsTreeRoot: "0",
            userState: "19741699825581035955461538421343124526005116867458304855282249203635586179547",
            value: ["20000101", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
        }

        const expOut = {
            challenge: "1",
            userID: "379949150130214723420589610911161895495647789006649785264738141299135414272",
            claimSchema: "180410020913331409885634153623124536270",
            slotIndex: "2",
            operator: "0",
            timestamp: "1642074362",
        }
        const w = await circuit.calculateWitness(inputs, true);
        await circuit.assertOut(w, expOut);
    })
    ;
})
;
