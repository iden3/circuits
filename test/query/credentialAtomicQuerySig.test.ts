import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;
const chai = require("chai");
const assert = chai.assert;

export {};

describe("Test CredentialAtomicQuerySig.circom", function () {

    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits/query", "credentialAtomicQuerySigTest.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );

    });

    after(async () => {
        circuit.release()
    })

    it("credentialAtomicQuerySigTest", async () => {
        // inputs MUST be generated by GO-CIRCUITS library https://github.com/iden3/go-circuits (using corresponding test)
        const inputs = {
            "challenge": "84239",
            "challengeSignatureR8x": "14443879978900947038971926807837206222830804504916993621940925629433736033219",
            "challengeSignatureR8y": "12729002170022424539486365270180256739680472584306485783075800699487899204326",
            "challengeSignatureS": "836454431395954422103086501419117817962615640408892446754696281220237408543",
            "claimSchema": "210459579859058135404770043788028292398",
            "issuerAuthClaim": ["304427537360709784173770334266246861770", "0", "4003653841729095893886045954705542872794447955766102255759127797295285488487", "12432651117722474612070219664501364108487965088671769880828964159025685825181", "0", "0", "0", "0"],
            "issuerAuthClaimMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "issuerAuthClaimNonRevMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "issuerAuthClaimNonRevMtpAuxHi": "0",
            "issuerAuthClaimNonRevMtpAuxHv": "0",
            "issuerAuthClaimNonRevMtpNoAux": "1",
            "issuerAuthClaimsTreeRoot": "5123307644320232334601789092683659046372501933037132521592406792551396194285",
            "issuerAuthRevTreeRoot": "0",
            "issuerAuthRootsTreeRoot": "0",
            "issuerClaim": ["3613283249068442770038516118105710406958", "222712906379570502079611869905711649383946316867077911802139171411787317248", "19960424", "2", "227737578863135127229742293906", "0", "0", "0"],
            "issuerClaimNonRevClaimsTreeRoot": "15223488090497480996164278132154256642649856052781941842012430126901504694315",
            "issuerClaimNonRevMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "issuerClaimNonRevMtpAuxHi": "0",
            "issuerClaimNonRevMtpAuxHv": "0",
            "issuerClaimNonRevMtpNoAux": "1",
            "issuerClaimNonRevRevTreeRoot": "0",
            "issuerClaimNonRevRootsTreeRoot": "4990132952129040175987903194901426383880983865057110565659262312741936794566",
            "issuerClaimNonRevState": "19221836623970007220538457599669851375427558847917606787084815224761802529201",
            "issuerClaimSignatureR8x": "19045858395840746612549877977108164799354042570658196386453619850564787233776",
            "issuerClaimSignatureR8y": "739473645024068689033722089826774751642222247621407780021799744545508322878",
            "issuerClaimSignatureS": "649122636969614974711413717869822497148719098417447361410598803181314860028",
            "issuerClaimsTreeRoot": "5123307644320232334601789092683659046372501933037132521592406792551396194285",
            "issuerID": "330477016068568275516898063887311212065482015025379036159122139014924926976",
            "issuerRevTreeRoot": "0",
            "issuerRootsTreeRoot": "0",
            "issuerState": "11672667429383627660992648216772306271234451162443612055001584519010749218959",
            "operator": 1,
            "slotIndex": 2,
            "timestamp": "1651850376",
            "userAuthClaim": ["304427537360709784173770334266246861770", "0", "11151655580697319947882291674102291730051706338247314064771322625319070352517", "17002319580480461745556995341522831877523489413849835052106266233588801210277", "0", "0", "0", "0"],
            "userAuthClaimMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "userAuthClaimNonRevMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "userAuthClaimNonRevMtpAuxHi": "0",
            "userAuthClaimNonRevMtpAuxHv": "0",
            "userAuthClaimNonRevMtpNoAux": "1",
            "userClaimsTreeRoot": "19778093938750740790275490062389575839849129769112681857212084478032253498250",
            "userID": "222712906379570502079611869905711649383946316867077911802139171411787317248",
            "userRevTreeRoot": "0",
            "userRootsTreeRoot": "0",
            "userState": "7608718875990494885422326673876913565155307854054144181362485232187902102852",
            "value": ["20000101", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]
        }

        const expOut = {
            challenge: "84239",
            userID: "222712906379570502079611869905711649383946316867077911802139171411787317248",
            claimSchema: "210459579859058135404770043788028292398",
            slotIndex: "2",
            operator: "1",
            timestamp: "1651850376",
        }
        const w = await circuit.calculateWitness(inputs, true);
        await circuit.assertOut(w, expOut);
    })
    ;
})
;
