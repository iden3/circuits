import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;

// inputs MUST be generated by GO-CIRCUITS library https://github.com/iden3/go-circuits (using corresponding test)
describe("idUtils.circom:", async function() {
    
    const tests = [
        {
            desc: "First",
            input: {
                in: "825129518415581397661575995183474599806529764871834543166439294091760",
                start: "0"
            },
            output: {
                out: "4565",
            },
        },
        {
            desc: "with start",
            input: {
                in: "825129518415581397661575995183474599806529764871834543166439294091760",
                start: "10",
            },
            output: {
                out: "4575",
            },
        },
        {
            desc: "with overflow",
            input: {
                in: "825129518415581397661575995183474599806529764871834543166439294091760",
                start: "65525",
            },
            output: {
                out: "4555",
            },
        },
    ];

    let circuit;
    this.timeout(300000)

    before(async () => {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits", "idUtils_SumModulus.circom"),
            {
                output: path.join(__dirname, "../circuits", "build/idUtils_SumModulus"),
                recompile: true,
                reduceConstraints: true,
            },
        );
    });

    tests.forEach(({desc, input, output}) => {
        it(`auth ${desc}`, async function() {
            const w = await circuit.calculateWitness(input, true);
            await circuit.checkConstraints(w);
            await circuit.assertOut(w, output);
        });
    });
});
