import {describe} from "mocha";

const path = require("path");
const wasmTester = require("circom_tester").wasm;

// export {};

describe("Test stateTransition.circom", function() {

    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await wasmTester(
            path.join(__dirname, "../circuits/", "stateTransition.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );

    });

    after(async () => {
        circuit.release()
    })

    const tests = [
        {desc: "Positive: old state is genesis", inputs: {authClaim: ["301485908906857522017021291028488077057", "0", "4720763745722683616702324599137259461509439547324750011830105416383780791263", "4844030361230692908091131578688419341633213823133966379083981236400104720538", "16547485850637761685", "0", "0", "0"], authClaimMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], authClaimNonRevMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], authClaimNonRevMtpAuxHi: "0", authClaimNonRevMtpAuxHv: "0", authClaimNonRevMtpNoAux: "1", claimsTreeRoot: "5156125448952672817978035354327403409438120028299513459509442000229340486813", isOldStateGenesis: "1", newUserState: "21113804037250189000799544443714429575956552660749022584991067995298527468524", oldUserState: "13749793311041076104545663747883540987785640262360452307923674522221753800226", revTreeRoot: "0", rootsTreeRoot: "0", signatureR8x: "99904229815096221288807332669168614815587671694234348514336906218495188838", signatureR8y: "14479424520213932692532868197082448874163362096598733711009546948748030535500", signatureS: "2461800278691601381946855737202406909094872061773916592707657624097346804783", userID: "19104853439462320209059061537253618984153217267677512271018416655565783041"}, expOut: {userID: "19104853439462320209059061537253618984153217267677512271018416655565783041", newUserState: "21113804037250189000799544443714429575956552660749022584991067995298527468524", oldUserState: "13749793311041076104545663747883540987785640262360452307923674522221753800226", isOldStateGenesis: "1"}},
        {desc: "Positive: old state is not genesis", inputs: {authClaim: ["301485908906857522017021291028488077057", "0", "4720763745722683616702324599137259461509439547324750011830105416383780791263", "4844030361230692908091131578688419341633213823133966379083981236400104720538", "16547485850637761685", "0", "0", "0"], authClaimMtp: ["20705360459443886266589173521200199826970601318029396875976898748762842059297", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], authClaimNonRevMtp: ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], authClaimNonRevMtpAuxHi: "0", authClaimNonRevMtpAuxHv: "0", authClaimNonRevMtpNoAux: "1", claimsTreeRoot: "6984610952247418323757666775772385794275837910148332707634157199038140910110", isOldStateGenesis: "0", newUserState: "11480543837946893926619957946581464990343068895412528016506285426511519205281", oldUserState: "21113804037250189000799544443714429575956552660749022584991067995298527468524", revTreeRoot: "0", rootsTreeRoot: "0", signatureR8x: "21616845944164560241611878380463745567906076100551352869227546578054608093510", signatureR8y: "9267289053197120194610447523723557449331933718265521821106266393673192035404", signatureS: "1283249594229660620578778116119309232142386274386899414972550689140625723501", userID: "19104853439462320209059061537253618984153217267677512271018416655565783041"}, expOut: {userID: "19104853439462320209059061537253618984153217267677512271018416655565783041", newUserState: "11480543837946893926619957946581464990343068895412528016506285426511519205281", oldUserState: "21113804037250189000799544443714429575956552660749022584991067995298527468524", isOldStateGenesis: "0"}},
    ];

    tests.forEach(({desc, inputs, expOut}) => {
        it(`${desc}`, async function() {
            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });
    });

});
