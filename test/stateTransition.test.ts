import {describe} from "mocha";

const path = require("path");
const wasmTester = require("circom_tester").wasm;

// export {};

describe("Test stateTransition.circom", function() {

    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await wasmTester(
            path.join(__dirname, "../circuits/", "stateTransition.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );

    });

    after(async () => {
        circuit.release()
    })

    const tests = [
        {"desc":"Positive: old state is genesis","inputs":{"authClaim":["80551937543569765027552589160822318028","0","4720763745722683616702324599137259461509439547324750011830105416383780791263","4844030361230692908091131578688419341633213823133966379083981236400104720538","16547485850637761685","0","0","0"],"authClaimMtp":["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"authClaimNonRevMtp":["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"authClaimNonRevMtpAuxHi":"0","authClaimNonRevMtpAuxHv":"0","authClaimNonRevMtpNoAux":"1","claimsTreeRoot":"8162166103065016664685834856644195001371303013149727027131225893397958846382","isOldStateGenesis":"1","newUserState":"7115004997868594253010848596868364067574661249707337517331323113105592633327","oldUserState":"8039964009611210398788855768060749920589777058607598891238307089541758339342","revTreeRoot":"0","rootsTreeRoot":"0","signatureR8x":"361334819250135520716365635022122247186670085686564049934525264070020416049","signatureR8y":"12042336291028251258550374788607627666686750111534178228739359925952013099936","signatureS":"645508208020072463318799638644724392823438047603420864503725876203473805941","userID":"23148936466334350744548790012294489365207440754509988986684797708370051073","newAuthClaimMtp":["20643387758736831799596675626240785455902781070167728593409367019626753600795","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"newClaimsTreeRoot":"8794724428328826645726823821449086761079599815895679828313419678997386356573","newRevTreeRoot":"0","newRootsTreeRoot":"0"},"expOut":{"userID":"23148936466334350744548790012294489365207440754509988986684797708370051073","newUserState":"7115004997868594253010848596868364067574661249707337517331323113105592633327","oldUserState":"8039964009611210398788855768060749920589777058607598891238307089541758339342","isOldStateGenesis":"1"}},
        {"desc":"Positive: old state is not genesis","inputs":{"authClaim":["80551937543569765027552589160822318028","0","4720763745722683616702324599137259461509439547324750011830105416383780791263","4844030361230692908091131578688419341633213823133966379083981236400104720538","16547485850637761685","0","0","0"],"authClaimMtp":["20643387758736831799596675626240785455902781070167728593409367019626753600795","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"authClaimNonRevMtp":["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"authClaimNonRevMtpAuxHi":"0","authClaimNonRevMtpAuxHv":"0","authClaimNonRevMtpNoAux":"1","claimsTreeRoot":"8794724428328826645726823821449086761079599815895679828313419678997386356573","isOldStateGenesis":"0","newUserState":"4546963942567895423749885008322935416520496550192665955639269179690288593086","oldUserState":"7115004997868594253010848596868364067574661249707337517331323113105592633327","revTreeRoot":"0","rootsTreeRoot":"0","signatureR8x":"19792717827219247588340137942112667964752038741073755597812783308633602002923","signatureR8y":"18334606748072315204305185631923152010223623371080284437052328775686642130235","signatureS":"2721187812724335077262719565987574803056292223585968358948256562899513979328","userID":"23148936466334350744548790012294489365207440754509988986684797708370051073","newAuthClaimMtp":["12556597401519486330285452122029558251875639613246233735882741175375581672376","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"newClaimsTreeRoot":"18118219877539765573291833245327124699251574510619312960034151483254231260771","newRevTreeRoot":"0","newRootsTreeRoot":"0"},"expOut":{"userID":"23148936466334350744548790012294489365207440754509988986684797708370051073","newUserState":"4546963942567895423749885008322935416520496550192665955639269179690288593086","oldUserState":"7115004997868594253010848596868364067574661249707337517331323113105592633327","isOldStateGenesis":"0"}}
    ];

    tests.forEach(({desc, inputs, expOut}) => {
        it(`${desc}`, async function() {
            const w = await circuit.calculateWitness(inputs, true);
            await circuit.assertOut(w, expOut);
            await circuit.checkConstraints(w);
        });
    });

});
